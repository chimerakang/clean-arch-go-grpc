// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/delivery/grpc/proto/product.proto

package product_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductHandlerClient is the client API for ProductHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductHandlerClient interface {
	GetList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Products, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Product, error)
	GetStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ProductHandler_GetStreamClient, error)
	BatchCreate(ctx context.Context, opts ...grpc.CallOption) (ProductHandler_BatchCreateClient, error)
	Create(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
}

type productHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewProductHandlerClient(cc grpc.ClientConnInterface) ProductHandlerClient {
	return &productHandlerClient{cc}
}

func (c *productHandlerClient) GetList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Products, error) {
	out := new(Products)
	err := c.cc.Invoke(ctx, "/product_grpc.ProductHandler/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productHandlerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/product_grpc.ProductHandler/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productHandlerClient) GetStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ProductHandler_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductHandler_ServiceDesc.Streams[0], "/product_grpc.ProductHandler/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &productHandlerGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductHandler_GetStreamClient interface {
	Recv() (*Product, error)
	grpc.ClientStream
}

type productHandlerGetStreamClient struct {
	grpc.ClientStream
}

func (x *productHandlerGetStreamClient) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productHandlerClient) BatchCreate(ctx context.Context, opts ...grpc.CallOption) (ProductHandler_BatchCreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductHandler_ServiceDesc.Streams[1], "/product_grpc.ProductHandler/BatchCreate", opts...)
	if err != nil {
		return nil, err
	}
	x := &productHandlerBatchCreateClient{stream}
	return x, nil
}

type ProductHandler_BatchCreateClient interface {
	Send(*Product) error
	CloseAndRecv() (*BatchCreateResponse, error)
	grpc.ClientStream
}

type productHandlerBatchCreateClient struct {
	grpc.ClientStream
}

func (x *productHandlerBatchCreateClient) Send(m *Product) error {
	return x.ClientStream.SendMsg(m)
}

func (x *productHandlerBatchCreateClient) CloseAndRecv() (*BatchCreateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BatchCreateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productHandlerClient) Create(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/product_grpc.ProductHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductHandlerServer is the server API for ProductHandler service.
// All implementations must embed UnimplementedProductHandlerServer
// for forward compatibility
type ProductHandlerServer interface {
	GetList(context.Context, *Empty) (*Products, error)
	Get(context.Context, *GetRequest) (*Product, error)
	GetStream(*Empty, ProductHandler_GetStreamServer) error
	BatchCreate(ProductHandler_BatchCreateServer) error
	Create(context.Context, *Product) (*Product, error)
	mustEmbedUnimplementedProductHandlerServer()
}

// UnimplementedProductHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedProductHandlerServer struct {
}

func (UnimplementedProductHandlerServer) GetList(context.Context, *Empty) (*Products, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedProductHandlerServer) Get(context.Context, *GetRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProductHandlerServer) GetStream(*Empty, ProductHandler_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedProductHandlerServer) BatchCreate(ProductHandler_BatchCreateServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedProductHandlerServer) Create(context.Context, *Product) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProductHandlerServer) mustEmbedUnimplementedProductHandlerServer() {}

// UnsafeProductHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductHandlerServer will
// result in compilation errors.
type UnsafeProductHandlerServer interface {
	mustEmbedUnimplementedProductHandlerServer()
}

func RegisterProductHandlerServer(s grpc.ServiceRegistrar, srv ProductHandlerServer) {
	s.RegisterService(&ProductHandler_ServiceDesc, srv)
}

func _ProductHandler_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductHandlerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_grpc.ProductHandler/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductHandlerServer).GetList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductHandler_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductHandlerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_grpc.ProductHandler/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductHandlerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductHandler_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductHandlerServer).GetStream(m, &productHandlerGetStreamServer{stream})
}

type ProductHandler_GetStreamServer interface {
	Send(*Product) error
	grpc.ServerStream
}

type productHandlerGetStreamServer struct {
	grpc.ServerStream
}

func (x *productHandlerGetStreamServer) Send(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

func _ProductHandler_BatchCreate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProductHandlerServer).BatchCreate(&productHandlerBatchCreateServer{stream})
}

type ProductHandler_BatchCreateServer interface {
	SendAndClose(*BatchCreateResponse) error
	Recv() (*Product, error)
	grpc.ServerStream
}

type productHandlerBatchCreateServer struct {
	grpc.ServerStream
}

func (x *productHandlerBatchCreateServer) SendAndClose(m *BatchCreateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *productHandlerBatchCreateServer) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProductHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_grpc.ProductHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductHandlerServer).Create(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductHandler_ServiceDesc is the grpc.ServiceDesc for ProductHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_grpc.ProductHandler",
	HandlerType: (*ProductHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _ProductHandler_GetList_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ProductHandler_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ProductHandler_Create_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _ProductHandler_GetStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BatchCreate",
			Handler:       _ProductHandler_BatchCreate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internal/delivery/grpc/proto/product.proto",
}
